# 1 exem
import numpy as np

def is_positive_definite(A):
    try:
        np.linalg.cholesky(A)
        return True
    except np.linalg.LinAlgError:
        return False

def cholesky_solve(A, b):
    n = A.shape[0]
    if b.size != n:
        raise ValueError("Размер вектора b должен соответствовать размеру матрицы A.")
    if A.shape[1] != n or not is_positive_definite(A):
        raise ValueError("Матрица A должна быть симметричной и положительно определенной.")
    L = np.zeros((n, n))
    for i in range(n):
        for j in range(i+1):
            sum = np.dot(L[i, :j], L[j, :j])
            if i == j:
                L[i, j] = np.sqrt(max(A[i, i] - sum, 0))
            else:
                L[i, j] = (A[i, j] - sum) / L[j, j]
    y = np.zeros(n)
    for i in range(n):
        y[i] = (b[i] - np.dot(L[i, :i], y[:i])) / L[i, i]
    x = np.zeros(n)
    for i in reversed(range(n)):
        x[i] = (y[i] - np.dot(L[i+1:, i], x[i+1:])) / L[i, i]
    return x
A = np.array(
[[81, -45, 45],
[-45, 50, -15],
[45, -15, 38]],
    dtype=float)
b = np.array([531, -460, 193],
             dtype=float)
try:
    x = cholesky_solve(A, b)
    print("Решение системы:", x)
except ValueError as e:
    print(e)
