# 1 exem
import numpy as np

def is_positive_definite(A):
    try:
        np.linalg.cholesky(A)
        return True
    except np.linalg.LinAlgError:
        return False

def cholesky_solve(A, b):
    n = A.shape[0]
    if b.size != n:
        raise ValueError("Размер вектора b должен соответствовать размеру матрицы A")
    if A.shape[1] != n or not is_positive_definite(A):
        raise ValueError("Матрица A должна быть симметричной и положительно определенной")
    L = np.zeros((n, n))
    for i in range(n):
        for j in range(i+1):
            sum = np.dot(L[i, :j], L[j, :j])
            if i == j:
                L[i, j] = np.sqrt(max(A[i, i] - sum, 0))
            else:
                L[i, j] = (A[i, j] - sum) / L[j, j]
    y = np.zeros(n)
    for i in range(n):
        y[i] = (b[i] - np.dot(L[i, :i], y[:i])) / L[i, i]
    x = np.zeros(n)
    for i in reversed(range(n)):
        x[i] = (y[i] - np.dot(L[i+1:, i], x[i+1:])) / L[i, i]
    return x
A = np.array(
[[81, -45, 45],
[-45, 50, -15],
[45, -15, 38]],
    dtype=float)
b = np.array([531, -460, 193],
             dtype=float)
try:
    x = cholesky_solve(A, b)
    print("Решение системы:", x)
except ValueError as e:
    print(e)





# 2 exem
import numpy as np

def minimal_residual_method(A, b, tol=1e-10, max_iterations=1000):
    if A.shape[0] != A.shape[1] or A.shape[0] != b.shape[0]:
        raise ValueError("Матрица A должна быть квадратной и размер вектора b должен соответствовать размеру матрицы A")
    if np.linalg.det(A) == 0:
        raise ValueError("Матрица A вырождена и не имеет обратной")
    x = np.zeros_like(b)
    r = b - np.dot(A, x)
    if np.linalg.norm(r) < tol:
        return x
    for iteration in range(max_iterations):
        Ar = np.dot(A, r)
        alpha = np.dot(r, Ar) / np.dot(Ar, Ar)
        x += alpha * r
        r = b - np.dot(A, x)
        if np.linalg.norm(r) < tol:
            return x
    raise ValueError("Метод не сходится после максимального количества итераций")
A = np.array([[14, 0], [1, 2]]
, dtype=float)
b = np.array([9, 8]
, dtype=float)
try:
    x = minimal_residual_method(A, b)
    print("Решение системы:", x)
except ValueError as e:
    print(str(e))




# 3 exem
import numpy as np
import matplotlib.pyplot as plt

def gradient(A, b, x):
    return A.T @ (A @ x - b)
def step_size(A, grad):
    denominator = grad.T @ A.T @ A @ grad
    if denominator == 0:
        return 0
    return (grad.T @ grad) / denominator
def steepest_descent(A, b, x0, tolerance=1e-10, max_iterations=1000):
    x = x0
    trajectory = [x0]
    for i in range(max_iterations):
        grad = gradient(A, b, x)
        if np.linalg.norm(grad) < tolerance:
            print(f"Сходимость достигнута на итерации {i}")
            return x, trajectory
        alpha = step_size(A, grad)
        if alpha == 0:
            print("Невозможно определить оптимальный размер шага")
            return x, trajectory
        x = x - alpha * grad
        trajectory.append(x)
    print("Превышено максимальное количество итераций")
    return x, trajectory
A = np.array([[5, 8, 1], [3, -2, 6], [2, 1, -1]])
b = np.array([2, -7, -5])
x0 = np.array([0, 0, 0])

solution, trajectory = steepest_descent(A, b, x0)
trajectory = np.array(trajectory)
plt.plot(trajectory[:, 0], trajectory[:, 1], 'bo-')
plt.xlabel('x1')
plt.ylabel('x2')
plt.title('Траектория решения методом наискорейшего спуска')
plt.grid(True)
plt.show()
print("Решение системы:", solution)
