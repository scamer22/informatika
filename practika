# 1 exem
import numpy as np


def is_positive_definite(A):
    try:
        np.linalg.cholesky(A)
        return True
    except np.linalg.LinAlgError:
        return False


def cholesky_solve(A, b):
    n = A.shape[0]
    if b.size != n:
        raise ValueError("Размер вектора b должен соответствовать размеру матрицы A")
    if A.shape[1] != n or not is_positive_definite(A):
        raise ValueError("Матрица A должна быть симметричной и положительно определенной")
    L = np.zeros((n, n))
    for i in range(n):
        for j in range(i+1):
            sum = np.dot(L[i, :j], L[j, :j])
            if i == j:
                L[i, j] = np.sqrt(max(A[i, i] - sum, 0))
            else:
                L[i, j] = (A[i, j] - sum) / L[j, j]
    y = np.zeros(n)
    for i in range(n):
        y[i] = (b[i] - np.dot(L[i, :i], y[:i])) / L[i, i]
    x = np.zeros(n)
    for i in reversed(range(n)):
        x[i] = (y[i] - np.dot(L[i+1:, i], x[i+1:])) / L[i, i]
    return x

A = np.array([[4, 12, -16], [12, 37, -43], [-16, -43, 98]], dtype=float)
b = np.array([1, 1, 1], dtype=float)

try:
    x = cholesky_solve(A, b)
    print("Решение системы:", x)

    # Расчет точности
    residual = np.dot(A, x) - b
    residual_norm = np.linalg.norm(residual)
    print(f"Норма вектора невязки (точность): {residual_norm}")

    # Искусственный итерационный процесс для оценки сходимости
    iterations = 5
    x_iter = x.copy()
    for i in range(iterations):
        x_iter = cholesky_solve(A, b)
        print(f"Итерация {i + 1}, решение: {x_iter}")

    # Расчет устойчивости
    cond_number = np.linalg.cond(A)
    print(f"Число обусловленности матрицы (устойчивость): {cond_number}")

except ValueError as e:
    print(e)






# 2 exem
import numpy as np
import matplotlib.pyplot as plt


def minimal_residual_method(A, b, tol=1e-10, max_iterations=1667):
    if A.shape[0] != A.shape[1] or A.shape[0] != b.shape[0]:
        raise ValueError("Матрица A должна быть квадратной и размер вектора b должен соответствовать размеру матрицы A")
    if np.linalg.det(A) == 0:
        raise ValueError("Матрица A вырождена и не имеет обратной")
    x = np.zeros_like(b)
    r = b - np.dot(A, x)
    residuals = []
    solution = []
    if np.linalg.norm(r) < tol:
        return x, residuals, solution
    for iteration in range(max_iterations):
        Ar = np.dot(A, r)
        alpha = np.dot(r, Ar) / np.dot(Ar, Ar)
        x += alpha * r
        r = b - np.dot(A, x)
        residuals.append(np.linalg.norm(r))
        solution.append(x.copy())
        if np.linalg.norm(r) < tol:
            break
    if np.linalg.norm(r) >= tol:
        raise ValueError("Метод не сходится после максимального количества итераций")
    return x, residuals, solution


def plot_solution(solution, steps=5):
    plt.figure(figsize=(10, 6))
    for i, sol in enumerate(solution[:steps]):
        plt.plot(sol, label=f'Шаг {i + 1}', marker='o')
    plt.xlabel('Индекс компонента')
    plt.ylabel('Значение компонента')
    plt.title('График первых 5 шагов решения системы уравнений')
    plt.legend()
    plt.grid(True)
    plt.show()


# Вставка расчета точности, сходимости и устойчивости
A = np.array([[1, 1/2, 1/3], [1/2, 1/3, 1/4], [1/3, 1/4, 1/5]], dtype=float)  # Используйте невырожденную матрицу
b = np.array([1, 0, 0], dtype=float)

try:
    x, residuals, solution = minimal_residual_method(A, b)
    print("Решение системы:", x)

    # Расчет точности
    residual = np.dot(A, x) - b
    residual_norm = np.linalg.norm(residual)
    print(f"Норма вектора невязки (точность): {residual_norm}")

    # Визуализация сходимости
    plt.figure(figsize=(10, 6))
    plt.plot(residuals, label='Норма невязки')
    plt.xlabel('Номер итерации')
    plt.ylabel('Норма невязки')
    plt.title('Сходимость метода минимальных невязок')
    plt.legend()
    plt.grid(True)
    plt.show()

    # Расчет устойчивости
    cond_number = np.linalg.cond(A)
    print(f"Число обусловленности матрицы (устойчивость): {cond_number}")

    # Визуализация решения
    plot_solution(solution)

except ValueError as e:
    print(str(e))





# 3 exem
import numpy as np
import matplotlib.pyplot as plt

def gradient(A, b, x):
    return A.T @ (A @ x - b)

def step_size(A, grad):
    denominator = grad.T @ A.T @ A @ grad
    if denominator == 0:
        return 0
    return (grad.T @ grad) / denominator

def steepest_descent(A, b, x0, tolerance=1e-10, max_iterations=1000):
    x = x0
    trajectory = [x0]
    for i in range(max_iterations):
        grad = gradient(A, b, x)
        if np.linalg.norm(grad) < tolerance:
            print(f"Сходимость достигнута на итерации {i}")
            return x, trajectory
        alpha = step_size(A, grad)
        if alpha == 0:
            print("Невозможно определить оптимальный размер шага")
            return x, trajectory
        x = x - alpha * grad
        trajectory.append(x)
    print("Превышено максимальное количество итераций")
    return x, trajectory

def plot_trajectory(trajectory):
    trajectory = np.array(trajectory)
    plt.plot(trajectory[:, 0], trajectory[:, 1], 'bo-')
    plt.xlabel('x1')
    plt.ylabel('x2')
    plt.title('Траектория решения методом наискорейшего спуска')
    plt.grid(True)
    plt.show()

def calculate_accuracy(A, b, x):
    residual = A @ x - b
    residual_norm = np.linalg.norm(residual)
    print(f"Норма вектора невязки (точность): {residual_norm}")
    return residual_norm

def calculate_convergence(residuals):
    plt.figure(figsize=(10, 6))
    plt.plot(residuals, label='Норма невязки')
    plt.xlabel('Номер итерации')
    plt.ylabel('Норма невязки')
    plt.title('Сходимость метода наискорейшего спуска')
    plt.legend()
    plt.grid(True)
    plt.show()

def calculate_stability(A):
    cond_number = np.linalg.cond(A)
    print(f"Число обусловленности матрицы (устойчивость): {cond_number}")
    return cond_number

A = np.array([[4, 12, -16], [12, 37, -43], [-16, -43, 98]], dtype=float)
b = np.array([1, 1, 1], dtype=float)

x0 = np.array([0, 0, 0], dtype=float)

solution, trajectory = steepest_descent(A, b, x0)

# Расчет точности
residual_norm = calculate_accuracy(A, b, solution)
if residual_norm > 1e-10:
    print("Несходимая система")

# Визуализация сходимости
residuals = [np.linalg.norm(A @ x - b) for x in trajectory]
calculate_convergence(residuals)

# Расчет устойчивости
cond_number = calculate_stability(A)
if cond_number > 1e10:
    print("Неустойчивая система")

# Визуализация траектории
plot_trajectory(trajectory)

print("Решение системы:", solution)

